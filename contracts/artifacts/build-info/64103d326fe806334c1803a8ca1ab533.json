{
	"id": "64103d326fe806334c1803a8ca1ab533",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"sources": {
			"Error.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.30;\r\n\r\n/**\r\n * @title Errors\r\n * @author Aratta Labs\r\n * @dev This library contains custom errors used throughout the smart contracts.\r\n * Using custom errors is more gas-efficient than traditional `require` statements\r\n * with string messages, as the error data is stored as a selector and is logged\r\n * as part of the transaction's revert reason. This provides more granular feedback.\r\n */\r\nlibrary Errors {\r\n\r\n    /// @notice Thrown when the provided ad duration is zero.\r\n    error DurationMustBeGreaterThanZero();\r\n\r\n    /// @notice Thrown when the user's payment is less than the required amount for the ad.\r\n    /// @param required The total amount of LYX required.\r\n    /// @param sent The amount of LYX that was actually sent.\r\n    error PriceNotMet(uint256 required, uint256 sent);\r\n\r\n    /// @notice Thrown when a function is called on an ad that has already expired.\r\n    error AdHasExpired();\r\n\r\n    /// @notice Thrown when a caller does not have the necessary permissions to perform an action.\r\n    error Unauthorized();\r\n\r\n    /// @notice Thrown when an attempt is made to set the maximum number of ads to an invalid value.\r\n    error InvalidMaxAds();\r\n\r\n    /// @notice Thrown when the owner attempts to set a fee percentage greater than 100.\r\n    error InvalidFee();\r\n\r\n    /// @notice Thrown when the owner attempts to set the daily price to zero.\r\n    error InvalidPrice();\r\n\r\n    /// @notice Thrown when the owner attempts to set the claim percentage to a value greater than 100.\r\n    error InvalidClaimPercentage();\r\n\r\n    /// @notice Thrown when all available ad slots are occupied and no expired ads can be replaced.\r\n    error MaximumAdReached();\r\n\r\n    /// @notice Thrown when a transfer of funds to an address fails.\r\n    error TransferFailed();\r\n\r\n    /// @notice Thrown when a user attempts to claim a fee from an ad they have already claimed from.\r\n    error UserClaimedAlready();\r\n\r\n    /// @notice Thrown when the provided start index or count for pagination is invalid.\r\n    error InvalidPagination();\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"Error.sol": {
				"Errors": {
					"abi": [
						{
							"inputs": [],
							"name": "AdHasExpired",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "DurationMustBeGreaterThanZero",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidClaimPercentage",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidFee",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidMaxAds",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidPagination",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidPrice",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MaximumAdReached",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "required",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "sent",
									"type": "uint256"
								}
							],
							"name": "PriceNotMet",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Unauthorized",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "UserClaimedAlready",
							"type": "error"
						}
					],
					"devdoc": {
						"author": "Aratta Labs",
						"details": "This library contains custom errors used throughout the smart contracts. Using custom errors is more gas-efficient than traditional `require` statements with string messages, as the error data is stored as a selector and is logged as part of the transaction's revert reason. This provides more granular feedback.",
						"errors": {
							"PriceNotMet(uint256,uint256)": [
								{
									"params": {
										"required": "The total amount of LYX required.",
										"sent": "The amount of LYX that was actually sent."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "Errors",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Error.sol\":447:2090  library Errors {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Error.sol\":447:2090  library Errors {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      revert(0x00, 0x00)\n\n    auxdata: 0xa2646970667358221220774713c3009265d0978afd168e3f21e033cd05d54413560c15a1dbb18389375364736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220774713c3009265d0978afd168e3f21e033cd05d54413560c15a1dbb18389375364736f6c634300081e0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x4713C3009265D0978AFD168E3F21E033CD05D54413560C15 LOG1 0xDB 0xB1 DUP4 DUP10 CALLDATACOPY MSTORE8 PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "447:1643:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220774713c3009265d0978afd168e3f21e033cd05d54413560c15a1dbb18389375364736f6c634300081e0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x4713C3009265D0978AFD168E3F21E033CD05D54413560C15 LOG1 0xDB 0xB1 DUP4 DUP10 CALLDATACOPY MSTORE8 PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "447:1643:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 447,
									"end": 2090,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 447,
									"end": 2090,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220774713c3009265d0978afd168e3f21e033cd05d54413560c15a1dbb18389375364736f6c634300081e0033",
									".code": [
										{
											"begin": 447,
											"end": 2090,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 447,
											"end": 2090,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 447,
											"end": 2090,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 447,
											"end": 2090,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 447,
											"end": 2090,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 447,
											"end": 2090,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 447,
											"end": 2090,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 447,
											"end": 2090,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 447,
											"end": 2090,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"Error.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AdHasExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DurationMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidClaimPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxAds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPagination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumAdReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"}],\"name\":\"PriceNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserClaimedAlready\",\"type\":\"error\"}],\"devdoc\":{\"author\":\"Aratta Labs\",\"details\":\"This library contains custom errors used throughout the smart contracts. Using custom errors is more gas-efficient than traditional `require` statements with string messages, as the error data is stored as a selector and is logged as part of the transaction's revert reason. This provides more granular feedback.\",\"errors\":{\"PriceNotMet(uint256,uint256)\":[{\"params\":{\"required\":\"The total amount of LYX required.\",\"sent\":\"The amount of LYX that was actually sent.\"}}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"Errors\",\"version\":1},\"userdoc\":{\"errors\":{\"AdHasExpired()\":[{\"notice\":\"Thrown when a function is called on an ad that has already expired.\"}],\"DurationMustBeGreaterThanZero()\":[{\"notice\":\"Thrown when the provided ad duration is zero.\"}],\"InvalidClaimPercentage()\":[{\"notice\":\"Thrown when the owner attempts to set the claim percentage to a value greater than 100.\"}],\"InvalidFee()\":[{\"notice\":\"Thrown when the owner attempts to set a fee percentage greater than 100.\"}],\"InvalidMaxAds()\":[{\"notice\":\"Thrown when an attempt is made to set the maximum number of ads to an invalid value.\"}],\"InvalidPagination()\":[{\"notice\":\"Thrown when the provided start index or count for pagination is invalid.\"}],\"InvalidPrice()\":[{\"notice\":\"Thrown when the owner attempts to set the daily price to zero.\"}],\"MaximumAdReached()\":[{\"notice\":\"Thrown when all available ad slots are occupied and no expired ads can be replaced.\"}],\"PriceNotMet(uint256,uint256)\":[{\"notice\":\"Thrown when the user's payment is less than the required amount for the ad.\"}],\"TransferFailed()\":[{\"notice\":\"Thrown when a transfer of funds to an address fails.\"}],\"Unauthorized()\":[{\"notice\":\"Thrown when a caller does not have the necessary permissions to perform an action.\"}],\"UserClaimedAlready()\":[{\"notice\":\"Thrown when a user attempts to claim a fee from an ad they have already claimed from.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Error.sol\":\"Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Error.sol\":{\"keccak256\":\"0xd7b249886704989434a95f5eb395f188cb61cb6f9079f9bd08aad0f150c6823b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://213dc1f9e0a2f1f96276201eaed493f0684a75afdaf513d806755c03edc49705\",\"dweb:/ipfs/QmQ3ymph9SejdpXJfvZmyG6huR4hpgZugVeqPC8KmeSFjU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"AdHasExpired()": [
								{
									"notice": "Thrown when a function is called on an ad that has already expired."
								}
							],
							"DurationMustBeGreaterThanZero()": [
								{
									"notice": "Thrown when the provided ad duration is zero."
								}
							],
							"InvalidClaimPercentage()": [
								{
									"notice": "Thrown when the owner attempts to set the claim percentage to a value greater than 100."
								}
							],
							"InvalidFee()": [
								{
									"notice": "Thrown when the owner attempts to set a fee percentage greater than 100."
								}
							],
							"InvalidMaxAds()": [
								{
									"notice": "Thrown when an attempt is made to set the maximum number of ads to an invalid value."
								}
							],
							"InvalidPagination()": [
								{
									"notice": "Thrown when the provided start index or count for pagination is invalid."
								}
							],
							"InvalidPrice()": [
								{
									"notice": "Thrown when the owner attempts to set the daily price to zero."
								}
							],
							"MaximumAdReached()": [
								{
									"notice": "Thrown when all available ad slots are occupied and no expired ads can be replaced."
								}
							],
							"PriceNotMet(uint256,uint256)": [
								{
									"notice": "Thrown when the user's payment is less than the required amount for the ad."
								}
							],
							"TransferFailed()": [
								{
									"notice": "Thrown when a transfer of funds to an address fails."
								}
							],
							"Unauthorized()": [
								{
									"notice": "Thrown when a caller does not have the necessary permissions to perform an action."
								}
							],
							"UserClaimedAlready()": [
								{
									"notice": "Thrown when a user attempts to claim a fee from an ad they have already claimed from."
								}
							]
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"Error.sol": {
				"ast": {
					"absolutePath": "Error.sol",
					"exportedSymbols": {
						"Errors": [
							43
						]
					},
					"id": 44,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".30"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Errors",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "61:384:0",
								"text": " @title Errors\n @author Aratta Labs\n @dev This library contains custom errors used throughout the smart contracts.\n Using custom errors is more gas-efficient than traditional `require` statements\n with string messages, as the error data is stored as a selector and is logged\n as part of the transaction's revert reason. This provides more granular feedback."
							},
							"fullyImplemented": true,
							"id": 43,
							"linearizedBaseContracts": [
								43
							],
							"name": "Errors",
							"nameLocation": "455:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "471:57:0",
										"text": "@notice Thrown when the provided ad duration is zero."
									},
									"errorSelector": "cf478f23",
									"id": 5,
									"name": "DurationMustBeGreaterThanZero",
									"nameLocation": "540:29:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "569:2:0"
									},
									"src": "534:38:0"
								},
								{
									"documentation": {
										"id": 6,
										"nodeType": "StructuredDocumentation",
										"src": "580:209:0",
										"text": "@notice Thrown when the user's payment is less than the required amount for the ad.\n @param required The total amount of LYX required.\n @param sent The amount of LYX that was actually sent."
									},
									"errorSelector": "bc03bccd",
									"id": 12,
									"name": "PriceNotMet",
									"nameLocation": "801:11:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"mutability": "mutable",
												"name": "required",
												"nameLocation": "821:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "813:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 7,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "813:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "sent",
												"nameLocation": "839:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "831:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 9,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "831:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "812:32:0"
									},
									"src": "795:50:0"
								},
								{
									"documentation": {
										"id": 13,
										"nodeType": "StructuredDocumentation",
										"src": "853:79:0",
										"text": "@notice Thrown when a function is called on an ad that has already expired."
									},
									"errorSelector": "4b90dcc8",
									"id": 15,
									"name": "AdHasExpired",
									"nameLocation": "944:12:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "956:2:0"
									},
									"src": "938:21:0"
								},
								{
									"documentation": {
										"id": 16,
										"nodeType": "StructuredDocumentation",
										"src": "967:94:0",
										"text": "@notice Thrown when a caller does not have the necessary permissions to perform an action."
									},
									"errorSelector": "82b42900",
									"id": 18,
									"name": "Unauthorized",
									"nameLocation": "1073:12:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1085:2:0"
									},
									"src": "1067:21:0"
								},
								{
									"documentation": {
										"id": 19,
										"nodeType": "StructuredDocumentation",
										"src": "1096:96:0",
										"text": "@notice Thrown when an attempt is made to set the maximum number of ads to an invalid value."
									},
									"errorSelector": "2044840f",
									"id": 21,
									"name": "InvalidMaxAds",
									"nameLocation": "1204:13:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1217:2:0"
									},
									"src": "1198:22:0"
								},
								{
									"documentation": {
										"id": 22,
										"nodeType": "StructuredDocumentation",
										"src": "1228:84:0",
										"text": "@notice Thrown when the owner attempts to set a fee percentage greater than 100."
									},
									"errorSelector": "58d620b3",
									"id": 24,
									"name": "InvalidFee",
									"nameLocation": "1324:10:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1334:2:0"
									},
									"src": "1318:19:0"
								},
								{
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1345:74:0",
										"text": "@notice Thrown when the owner attempts to set the daily price to zero."
									},
									"errorSelector": "00bfc921",
									"id": 27,
									"name": "InvalidPrice",
									"nameLocation": "1431:12:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1443:2:0"
									},
									"src": "1425:21:0"
								},
								{
									"documentation": {
										"id": 28,
										"nodeType": "StructuredDocumentation",
										"src": "1454:99:0",
										"text": "@notice Thrown when the owner attempts to set the claim percentage to a value greater than 100."
									},
									"errorSelector": "2d8211e0",
									"id": 30,
									"name": "InvalidClaimPercentage",
									"nameLocation": "1565:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1587:2:0"
									},
									"src": "1559:31:0"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "1598:95:0",
										"text": "@notice Thrown when all available ad slots are occupied and no expired ads can be replaced."
									},
									"errorSelector": "902debb4",
									"id": 33,
									"name": "MaximumAdReached",
									"nameLocation": "1705:16:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1721:2:0"
									},
									"src": "1699:25:0"
								},
								{
									"documentation": {
										"id": 34,
										"nodeType": "StructuredDocumentation",
										"src": "1732:64:0",
										"text": "@notice Thrown when a transfer of funds to an address fails."
									},
									"errorSelector": "90b8ec18",
									"id": 36,
									"name": "TransferFailed",
									"nameLocation": "1808:14:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1822:2:0"
									},
									"src": "1802:23:0"
								},
								{
									"documentation": {
										"id": 37,
										"nodeType": "StructuredDocumentation",
										"src": "1833:97:0",
										"text": "@notice Thrown when a user attempts to claim a fee from an ad they have already claimed from."
									},
									"errorSelector": "5ea847be",
									"id": 39,
									"name": "UserClaimedAlready",
									"nameLocation": "1942:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 38,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1960:2:0"
									},
									"src": "1936:27:0"
								},
								{
									"documentation": {
										"id": 40,
										"nodeType": "StructuredDocumentation",
										"src": "1971:84:0",
										"text": "@notice Thrown when the provided start index or count for pagination is invalid."
									},
									"errorSelector": "3d47273b",
									"id": 42,
									"name": "InvalidPagination",
									"nameLocation": "2067:17:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2084:2:0"
									},
									"src": "2061:26:0"
								}
							],
							"scope": 44,
							"src": "447:1643:0",
							"usedErrors": [
								5,
								12,
								15,
								18,
								21,
								24,
								27,
								30,
								33,
								36,
								39,
								42
							],
							"usedEvents": []
						}
					],
					"src": "33:2059:0"
				},
				"id": 0
			}
		}
	}
}