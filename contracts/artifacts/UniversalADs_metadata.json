{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AdHasExpired",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DurationMustBeGreaterThanZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "EnforcedPause",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ExpectedPause",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidClaimPercentage",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidFee",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidPagination",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidPrice",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MaximumAdReached",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "required",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "sent",
						"type": "uint256"
					}
				],
				"name": "PriceNotMet",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TransferFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Unauthorized",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "UserClaimedAlready",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "adId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "metadata",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "duration",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endTime",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					}
				],
				"name": "AdCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "adId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "metadata",
						"type": "string"
					}
				],
				"name": "AdUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "adId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "claimer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Claimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "key",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "TeamUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "Withdrawal",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "VERSION",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "ads",
				"outputs": [
					{
						"internalType": "string",
						"name": "metadata",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "title",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "image",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "link",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "endTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "claimCounter",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "createdAt",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "duration",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "creator",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_index",
						"type": "uint256"
					}
				],
				"name": "claimFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimPercentage",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "fee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_startIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_count",
						"type": "uint256"
					}
				],
				"name": "getADs",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "adIndex",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "metadata",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "title",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "image",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "link",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "startTime",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "endTime",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "claimCounter",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "createdAt",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "duration",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "creator",
								"type": "address"
							}
						],
						"internalType": "struct UniversalADs.ADWithoutMappings[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAdLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "hasSpace",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_adIndex",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					}
				],
				"name": "hasUserClaimedAd",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_metadata",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_title",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_image",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_link",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "_duration",
						"type": "uint256"
					}
				],
				"name": "newAd",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "adId",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "price",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "team",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_index",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "_metadata",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_title",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_image",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_link",
						"type": "string"
					}
				],
				"name": "updateAd",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newClaimPercentage",
						"type": "uint256"
					}
				],
				"name": "updateClaimPercentage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newFee",
						"type": "uint256"
					}
				],
				"name": "updateFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newPrice",
						"type": "uint256"
					}
				],
				"name": "updatePrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "_addr",
						"type": "address"
					}
				],
				"name": "updateTeam",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Aratta Labs",
			"custom:emoji": "📢",
			"custom:security-contact": "atenyun@gmail.com",
			"details": "This contract manages the creation, updating, and claiming of ads. It supports a fixed number of active ads and allows expired ad slots to be reused.",
			"errors": {
				"EnforcedPause()": [
					{
						"details": "The operation failed because the contract is paused."
					}
				],
				"ExpectedPause()": [
					{
						"details": "The operation failed because the contract is not paused."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"PriceNotMet(uint256,uint256)": [
					{
						"params": {
							"required": "The total amount of LYX required.",
							"sent": "The amount of LYX that was actually sent."
						}
					}
				]
			},
			"events": {
				"AdCreated(uint256,string,uint256,uint256,uint256,address)": {
					"params": {
						"adId": "The unique ID of the ad.",
						"creator": "The address of the profile that created the ad.",
						"duration": "The ad's duration in days.",
						"endTime": "The timestamp when the ad will expire.",
						"metadata": "The metadata string associated with the ad.",
						"startTime": "The timestamp when the ad became active."
					}
				},
				"AdUpdated(uint256,string)": {
					"params": {
						"adId": "The unique ID of the ad that was updated.",
						"metadata": "The new metadata string."
					}
				},
				"Claimed(uint256,address,uint256)": {
					"params": {
						"adId": "The unique ID of the ad from which the fee was claimed.",
						"amount": "The amount of LYX (in wei) that was claimed.",
						"claimer": "The address of the profile that claimed the fee."
					}
				},
				"Paused(address)": {
					"details": "Emitted when the pause is triggered by `account`."
				},
				"TeamUpdated(string,address)": {
					"params": {
						"addr": "The new address assigned to the team member.",
						"key": "The name of the team member being updated."
					}
				},
				"Unpaused(address)": {
					"details": "Emitted when the pause is lifted by `account`."
				},
				"Withdrawal(address,uint256,uint256)": {
					"params": {
						"amount": "The amount of ETH (in wei) that was withdrawn.",
						"recipient": "The address that receives the funds.",
						"timestamp": "The block timestamp at which the withdrawal occurred."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"claimFee(uint256)": {
					"details": "The function checks that the ad is active and that the caller has not already claimed a fee for it. It then calculates and transfers the claim amount to the user.",
					"params": {
						"_index": "The index of the ad to claim from in the `ads` array."
					}
				},
				"getADs(uint256,uint256)": {
					"details": "This function returns an array of `ADWithoutMappings` structs to avoid returning the internal `claimed` mapping.",
					"params": {
						"_count": "The number of ads to retrieve.",
						"_startIndex": "The starting index of the ad list to retrieve."
					},
					"returns": {
						"_0": "An array of `ADWithoutMappings` structs."
					}
				},
				"getAdLength()": {
					"returns": {
						"_0": "The length of the `ads` array."
					}
				},
				"hasSpace()": {
					"returns": {
						"_0": "The length of the `ads` array."
					}
				},
				"hasUserClaimedAd(uint256,address)": {
					"params": {
						"_adIndex": "The index of the ad to check.",
						"_userAddress": "The address of the user."
					},
					"returns": {
						"_0": "A boolean indicating if the user has claimed the ad."
					}
				},
				"newAd(string,string,string,string,uint256)": {
					"details": "The function first checks for an expired ad slot to overwrite to optimize space. If no expired slots are found and the ad array is full, the transaction will revert. It ensures the caller has sent enough LUKSO to cover the cost, and then transfers the fees to the owner and team.",
					"params": {
						"_duration": "The duration of the ad in days.",
						"_image": "The URL of the ad image.",
						"_link": "The external link for the ad's call-to-action.",
						"_metadata": "A JSON string containing the ad's content metadata.",
						"_title": "The title of the ad."
					},
					"returns": {
						"_0": "bool Returns true if the ad was successfully created or replaced.",
						"adId": "The index of the newly created or replaced ad in the `ads` array."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"pause()": {
					"details": "Only the contract owner can call this function."
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"unpause()": {
					"details": "Only the contract owner can call this function."
				},
				"updateAd(uint256,string,string,string,string)": {
					"details": "This function can only be called by the original ad creator, and only while the ad is still active.",
					"params": {
						"_image": "The new URL of the ad image.",
						"_index": "The index of the ad to update in the `ads` array.",
						"_link": "The new external link for the ad's call-to-action.",
						"_metadata": "The new metadata string.",
						"_title": "The new title of the ad."
					}
				},
				"updateClaimPercentage(uint256)": {
					"details": "Only the contract owner can call this function. The new percentage must be between 0 and 100.",
					"params": {
						"_newClaimPercentage": "The new claim percentage (0-100)."
					}
				},
				"updateFee(uint256)": {
					"details": "Only the contract owner can call this function. The new fee must be between 0 and 100.",
					"params": {
						"_newFee": "The new fee percentage (0-100)."
					}
				},
				"updatePrice(uint256)": {
					"details": "Only the contract owner can call this function. The new price must be greater than zero.",
					"params": {
						"_newPrice": "The new price in wei."
					}
				},
				"updateTeam(string,address)": {
					"details": "Only the contract owner can call this function.",
					"params": {
						"_addr": "The new address for the team member.",
						"_name": "The name of the team member."
					}
				},
				"withdrawAll()": {
					"details": "This function can only be called by the contract owner and is non-reentrant."
				}
			},
			"stateVariables": {
				"ads": {
					"details": "A fixed-size array to hold the ads. The size is set to 2."
				},
				"claimPercentage": {
					"details": "The value ranges from 0-100."
				},
				"fee": {
					"details": "The value ranges from 0-100."
				},
				"price": {
					"details": "The value is denominated in wei."
				},
				"team": {
					"details": "A mapping from team member's name to their address."
				}
			},
			"title": "UniversalADs",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"AdHasExpired()": [
					{
						"notice": "Thrown when a function is called on an ad that has already expired."
					}
				],
				"DurationMustBeGreaterThanZero()": [
					{
						"notice": "Thrown when the provided ad duration is zero."
					}
				],
				"InvalidClaimPercentage()": [
					{
						"notice": "Thrown when the owner attempts to set the claim percentage to a value greater than 100."
					}
				],
				"InvalidFee()": [
					{
						"notice": "Thrown when the owner attempts to set a fee percentage greater than 100."
					}
				],
				"InvalidPagination()": [
					{
						"notice": "Thrown when the provided start index or count for pagination is invalid."
					}
				],
				"InvalidPrice()": [
					{
						"notice": "Thrown when the owner attempts to set the daily price to zero."
					}
				],
				"MaximumAdReached()": [
					{
						"notice": "Thrown when all available ad slots are occupied and no expired ads can be replaced."
					}
				],
				"PriceNotMet(uint256,uint256)": [
					{
						"notice": "Thrown when the user's payment is less than the required amount for the ad."
					}
				],
				"TransferFailed()": [
					{
						"notice": "Thrown when a transfer of funds to an address fails."
					}
				],
				"Unauthorized()": [
					{
						"notice": "Thrown when a caller does not have the necessary permissions to perform an action."
					}
				],
				"UserClaimedAlready()": [
					{
						"notice": "Thrown when a user attempts to claim a fee from an ad they have already claimed from."
					}
				]
			},
			"events": {
				"AdCreated(uint256,string,uint256,uint256,uint256,address)": {
					"notice": "Emitted when a new ad is successfully created."
				},
				"AdUpdated(uint256,string)": {
					"notice": "Emitted when an existing ad's metadata is updated."
				},
				"Claimed(uint256,address,uint256)": {
					"notice": "Emitted when a user successfully claims a fee from an ad."
				},
				"TeamUpdated(string,address)": {
					"notice": "Emitted when a team member's address is updated."
				},
				"Withdrawal(address,uint256,uint256)": {
					"notice": "Emitted when ETH is transferred from the contract's balance."
				}
			},
			"kind": "user",
			"methods": {
				"VERSION()": {
					"notice": "The version of the smart contract."
				},
				"claimFee(uint256)": {
					"notice": "Allows a user to claim a fee from an ad's revenue."
				},
				"claimPercentage()": {
					"notice": "The percentage of the ad value that a profile can claim."
				},
				"fee()": {
					"notice": "The fee percentage for the contract owner."
				},
				"getADs(uint256,uint256)": {
					"notice": "Retrieves a paginated list of ads."
				},
				"getAdLength()": {
					"notice": "Returns the total number of ads in the fixed-size array."
				},
				"hasSpace()": {
					"notice": "Returns the total number of empty ads."
				},
				"hasUserClaimedAd(uint256,address)": {
					"notice": "Checks if a user has already claimed a specific ad."
				},
				"newAd(string,string,string,string,uint256)": {
					"notice": "Creates a new ad with specified metadata and duration."
				},
				"pause()": {
					"notice": "Pauses contract operations."
				},
				"price()": {
					"notice": "The price for a single day of advertising."
				},
				"unpause()": {
					"notice": "Unpauses contract operations."
				},
				"updateAd(uint256,string,string,string,string)": {
					"notice": "Updates the metadata for an existing ad."
				},
				"updateClaimPercentage(uint256)": {
					"notice": "Updates the claim percentage for each profile."
				},
				"updateFee(uint256)": {
					"notice": "Updates the owner fee percentage."
				},
				"updatePrice(uint256)": {
					"notice": "Updates the price per day for a new ad."
				},
				"updateTeam(string,address)": {
					"notice": "Updates a team member's address."
				},
				"withdrawAll()": {
					"notice": "Transfers the entire contract's ETH balance to the contract owner."
				}
			},
			"notice": "A decentralized ad network on the LUKSO blockchain where Universal Profiles can monetize their presence by displaying ads.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"UniversalADs.sol": "UniversalADs"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/Pausable.sol": {
			"keccak256": "0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f",
			"license": "MIT",
			"urls": [
				"bzz-raw://f9d6f6f6600a2bec622f699081b58350873b5e63ce05464d17d674a290bb8a7c",
				"dweb:/ipfs/QmQKVzSQY1PM3Bid4QhgVVZyx6B4Jx7XgaQzLKHj38vJz8"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0xad148d59f05165f9217d0a9e1ac8f772abb02ea6aaad8a756315c532bf79f9f4",
			"license": "MIT",
			"urls": [
				"bzz-raw://15e3599867c2182f5831e9268b274b2ef2047825837df6b4d81c9e89254b093e",
				"dweb:/ipfs/QmZbL7XAYr5RmaNaooPgZRmcDXaudfsYQfYD9y5iAECvpS"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3",
				"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
			"license": "MIT",
			"urls": [
				"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
				"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
			]
		},
		"Error.sol": {
			"keccak256": "0xd7b249886704989434a95f5eb395f188cb61cb6f9079f9bd08aad0f150c6823b",
			"license": "MIT",
			"urls": [
				"bzz-raw://213dc1f9e0a2f1f96276201eaed493f0684a75afdaf513d806755c03edc49705",
				"dweb:/ipfs/QmQ3ymph9SejdpXJfvZmyG6huR4hpgZugVeqPC8KmeSFjU"
			]
		},
		"Event.sol": {
			"keccak256": "0xd06a13931c6bfc94b11ce37be7d5acde86ac2a773be94f332b0018ac17a1963b",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a318cb882114a24159f7d7fa865dbf7eaca1bb7453f6de955f10ff4a1793e8d",
				"dweb:/ipfs/QmPoe3NRgojXLrUujzXK7voSwDTKbHJacqWHpefY4CcS8E"
			]
		},
		"UniversalADs.sol": {
			"keccak256": "0x7dd0eea2d21da8e91dfb6616647d627544b8c2b5ea1b4361dccb526d24ee4007",
			"license": "MIT",
			"urls": [
				"bzz-raw://741986a6b7014ef02f2db560106417c2f5d662d19ac85700eb6ff25539c276b5",
				"dweb:/ipfs/QmRfHpBB4UVDes211nzngR1jTbyQ9M1qTr2qtgRfns3ebf"
			]
		}
	},
	"version": 1
}